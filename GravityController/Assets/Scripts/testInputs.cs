using UnityEngine.InputSystem;
using UnityEngine;

public class testInputs : MonoBehaviour
{

    //C# class generated by the new input system according to the selected keybindings
    private InputsController inputActions;
    private InputAction movement;

    private Rigidbody playerRigidbody;
    [SerializeField] private float horizontalSpeed = 1f;
    [SerializeField] private Transform cam;
    [SerializeField] private Camera playerCamera;
    private PlayerGravity playerGravity;

    [SerializeField] private float turnSpeed;

    //float turnSmoothTime = 0.1f;
    //float turnSmoothVelocity;

    private void Awake()
    {
        playerRigidbody = GetComponent<Rigidbody>();
        playerGravity = transform.GetComponent<PlayerGravity>();
        inputActions = new InputsController();
    }

    // Start is called before the first frame update
    void Start()
    {
        playerRigidbody.freezeRotation = true;
    }

    private void OnEnable()
    {
        movement = inputActions.Player.Move;
        inputActions.Player.Enable();
    }

    private void OnDisable()
    {
        inputActions.Player.Disable();
    }

    private void FixedUpdate()
    {
        Vector3 direction = new Vector3(movement.ReadValue<Vector2>().x, 0f, movement.ReadValue<Vector2>().y).normalized;

        if (direction.magnitude >= 0.1f)
        {
            Vector3 moveDirection = transform.forward * movement.ReadValue<Vector2>().y;
            playerRigidbody.MovePosition(playerRigidbody.position + moveDirection * (horizontalSpeed * Time.fixedDeltaTime));

            float targetAngle = Mathf.Atan2(direction.x, direction.z) * Mathf.Rad2Deg + cam.eulerAngles.y;
            Quaternion rightDirection = Quaternion.Euler(0f, targetAngle * (turnSpeed * Time.fixedDeltaTime), 0f);
            Quaternion newRotation = Quaternion.Slerp(playerRigidbody.rotation, playerRigidbody.rotation * rightDirection, Time.fixedDeltaTime); ;
            playerRigidbody.MoveRotation(newRotation);
        }
    }

    // Update is called once per frame
    void Update()
    {
        
    }
}
/*
 Vector3 direction = new Vector3(movement.ReadValue<Vector2>().x, 0f, movement.ReadValue<Vector2>().y);

        if(direction.magnitude >= 0f)
        {

            Debug.DrawRay(transform.position, transform.forward * 3, Color.red);
            Debug.DrawRay(transform.position, transform.right * 3, Color.red);
            Debug.DrawRay(transform.position, -transform.forward * 3, Color.red);
            Debug.DrawRay(transform.position, -transform.right * 3, Color.red);
            Debug.DrawRay(transform.position, transform.up * 3, Color.red);
            Debug.DrawRay(transform.position, -transform.up * 3, Color.red);

            float targetAngle = Mathf.Atan2(direction.x, direction.z) * Mathf.Rad2Deg;
            //float angle = Mathf.SmoothDampAngle(transform.eulerAngles.y, targetAngle, ref turnSmoothVelocity, turnSmoothTime);
            //Vector3 newAngle = new Vector3(0f, angle, 0f) + playerGravity.GravityDirection;
            //transform.rotation = Quaternion.Euler(0f, targetAngle, 0f);
            print(targetAngle);

            Quaternion targetDirection = Quaternion.Euler(0, targetAngle, 0);
            //Quaternion targetDirection = Quaternion.AngleAxis(targetAngle, transform.position);
            print(targetDirection);
            var rotatedVector = targetDirection * transform.forward;
            Debug.DrawRay(transform.position, rotatedVector * 10, Color.blue);


            Quaternion rotateMe = Quaternion.FromToRotation(playerGravity.GravityDirection, new Vector3(playerGravity.GravityDirection.x, playerGravity.GravityDirection.y, playerGravity.GravityDirection.z));
            Quaternion rotatePlayer = Quaternion.Slerp(playerRigidbody.rotation, rotateMe * playerRigidbody.rotation, Time.deltaTime * 5f);
            playerRigidbody.MoveRotation(rotatePlayer);

            //Vector3 moveDirection = Quaternion.Euler(0f, targetAngle, 0f) * Vector3.forward;

            playerRigidbody.AddForce(rotatedVector * horizontalSpeed * Time.fixedDeltaTime);
        }

        //playerRigidbody.AddForce(movement.ReadValue<Vector2>().x * horizontalSpeed, 0, movement.ReadValue<Vector2>().y * horizontalSpeed, ForceMode.Acceleration);
 */
