using System;
using UnityEngine;
using UnityEngine.InputSystem;

[RequireComponent(typeof(PlayerGravity))]
[RequireComponent(typeof(Rigidbody))]
public class PlayerController : MonoBehaviour
{
    //C# class generated by the new input system according to the selected keybindings
    private InputsController inputActions;
    private InputAction movement;

    //
    private Rigidbody playerRigidbody;
    [SerializeField] private float verticalSpeed = 1f;
    [SerializeField] private float maxVerticalSpeed = 5f;
    [SerializeField] private float horizontalSpeed = 1f;
    [SerializeField] private float maxHorizontalSpeed = 5f;
    [SerializeField] private float jumpForce = 5f;
    //Get the movement direction for a given input
    private Vector3 movementDirection = Vector3.zero;
    [SerializeField] private Camera playerCamera;
    [SerializeField] private bool isGrounded;
    private PlayerGravity playerGravity;
    [SerializeField] private Transform groundCheckObject;
    [SerializeField] private LayerMask groundCheckMask;
    [SerializeField] private float groundCheckRadius = 0.3f;

    private void Awake()
    {
        playerRigidbody = this.GetComponent<Rigidbody>();
        playerGravity = transform.GetComponent<PlayerGravity>();
        inputActions = new InputsController();
    }

    private void Start()
    {
        playerRigidbody.freezeRotation = true;
    }

    private void OnEnable()
    {
        inputActions.Player.Jump.started += DoJump;
        movement = inputActions.Player.Move;
        inputActions.Player.Enable();
    }

    private void OnDisable()
    {
        inputActions.Player.Jump.started -= DoJump;
        inputActions.Player.Disable();
    }

    private void FixedUpdate()
    {
        playerRigidbody.AddForce(movement.ReadValue<Vector2>().x * horizontalSpeed , 0 , movement.ReadValue<Vector2>().y * horizontalSpeed, ForceMode.Acceleration);
        //movementDirection += movement.ReadValue<Vector2>().x * GetCameraRight(playerCamera) * horizontalSpeed;
        //movementDirection += movement.ReadValue<Vector2>().y * GetCameraForward(playerCamera) * horizontalSpeed;

        //playerRigidbody.AddForce(movementDirection, ForceMode.Impulse);
        //movementDirection = Vector3.zero;

        Vector3 horizontalVelocity = playerRigidbody.velocity;
        horizontalVelocity.y = 0;
        if (horizontalVelocity.sqrMagnitude > maxHorizontalSpeed * maxHorizontalSpeed)
            playerRigidbody.velocity = horizontalVelocity.normalized * maxHorizontalSpeed + Vector3.up * playerRigidbody.velocity.y;

        LookAt();
        
    }

    private void LookAt()
    {
        Vector3 lookAtDirection = playerRigidbody.velocity;
        lookAtDirection.y = 0f;

        if (movement.ReadValue<Vector2>().sqrMagnitude > 0.1f && lookAtDirection.sqrMagnitude > 0.1f)
        {
            this.playerRigidbody.rotation = Quaternion.LookRotation(lookAtDirection, -playerGravity.GravityDirection);
        }
        else
        {
            playerRigidbody.angularVelocity = Vector3.zero;
        }
    }

    private void Update()
    {
        isGrounded = Physics.CheckSphere(groundCheckObject.position, groundCheckRadius, groundCheckMask);
    }

    private Vector3 GetCameraForward(Camera playerCamera)
    {
        Vector3 forward = playerCamera.transform.forward;
        forward.y = 0;
        return forward.normalized;
    }

    private Vector3 GetCameraRight(Camera playerCamera)
    {
        Vector3 right = playerCamera.transform.right;
        right.y = 0;
        return right.normalized;
    }

    private void DoJump(InputAction.CallbackContext obj)
    {
        if (isGrounded)
        {
            movementDirection += -playerGravity.GravityDirection * jumpForce;
        }
    }


}



/*
 [SerializeField] private LayerMask _groundMask;
    [SerializeField] private Transform _groundCheck;

    private bool isRunning;
    private bool isGrounded;
    private Rigidbody playerRigidbody;
    private Vector3 direction;
    private PlayerGravity playerGravity;

    public float verticalSpeed = 7f;
    public float localRotationSpeed = 1500f;
    private float groundCheckRadius = 0.3f;
    public float jumpForce = 500f;

    // Start is called before the first frame update
    void Start()
    {
        playerRigidbody = transform.GetComponent<Rigidbody>();
        playerGravity = transform.GetComponent<PlayerGravity>();
    }

    // Update is called once per frame
    void Update()
    {
        direction = new Vector3(Input.GetAxisRaw("Horizontal"), 0f, Input.GetAxisRaw("Vertical")).normalized;
        isGrounded = Physics.CheckSphere(_groundCheck.position, groundCheckRadius, _groundMask);

        if (Input.GetKeyDown(KeyCode.Space) && isGrounded)
            playerRigidbody.AddForce(-playerGravity.GravityDirection * jumpForce, ForceMode.Impulse);
    }

    // FixedUpdate is called once per physics update
    private void FixedUpdate()
    {
        isRunning = direction.magnitude > 0.1f;

        if (isRunning)
        {
            Vector3 moveDirection = transform.forward * direction.z;
            playerRigidbody.MovePosition(playerRigidbody.position + moveDirection * (verticalSpeed * Time.fixedDeltaTime));

            Quaternion rotateTowards = Quaternion.Euler(0f, direction.x * (localRotationSpeed * Time.fixedDeltaTime), 0f);
            Quaternion rotatePlayer = Quaternion.Slerp(playerRigidbody.rotation, playerRigidbody.rotation * rotateTowards, Time.fixedDeltaTime * 3f);
            playerRigidbody.MoveRotation(rotatePlayer);
        }
    }
*/